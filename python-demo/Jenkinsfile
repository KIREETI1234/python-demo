pipeline {
    agent any

    environment {
        VENV = 'venv'
    }

    stages {
        stage('Install OS Dependencies') {
            steps {
                sh '''
                echo "Installing python3-venv if missing..."
                sudo apt-get update
                sudo apt-get install -y python3-venv python3-pip
                '''
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/arjunkoppineni/python-demo.git'
            }
        }

        stage('Set Up Virtual Environment') {
            steps {
                sh '''
                echo "Creating virtual environment..."
                python3 -m venv $VENV
                . $VENV/bin/activate
                pip install --upgrade pip
                pip install -r python-demo/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                echo "Running tests..."
                . $VENV/bin/activate
                PYTHONPATH=$(pwd)/python-demo python3 -m unittest discover -s python-demo/tests -p "test_*.py"
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                echo "Building the project..."
                mkdir -p build
                cp -r python-demo/src/* build/
                '''
            }
        }

        stage('Archive Artifacts') {
            steps {
                sh '''
                echo "Archiving artifacts..."
                tar -czf python-demo.tar.gz -C build .
                '''
                archiveArtifacts artifacts: 'python-demo.tar.gz', fingerprint: true
            }
        }
    }

    post {
        always {
            echo "Cleaning up..."
            sh 'rm -rf $VENV build python-demo.tar.gz'
        }
    }
}
